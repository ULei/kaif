---

- name: Install the selinux python module
  yum: name=libselinux-python state=present
  when: ansible_os_family == "RedHat"
  tags: [packages,nginx]

- name: Copy the epel packages
  template: src=epel.repo.j2 dest=/etc/yum.repos.d/epel_ansible.repo
  when: ansible_os_family == "RedHat"
  tags: [packages,nginx]

- name: Install the nginx packages
  yum: name={{ item }} state=present disablerepo='*' enablerepo={{ yum_epel_repo }},{{ yum_base_repo }}
  with_items: '{{redhat_pkg}}'
  when: ansible_os_family == "RedHat"
  tags: [packages,nginx]

- name: Install nginx repo key
  apt_key: url=http://nginx.org/keys/nginx_signing.key state=present
  when: ansible_os_family == "Debian"
  tags: [packages,nginx]

- name: Install nginx repository for stable
  apt_repository: repo='deb http://nginx.org/packages/ubuntu/ xenial nginx' state=present update_cache=yes
  when: ansible_os_family == "Debian"
  tags: [packages,nginx]

- name: Install the nginx packages
  apt: name={{ item }} state=present update_cache=yes cache_valid_time=86400
  with_items: '{{ubuntu_pkg}}'
  environment: '{{env}}'
  when: ansible_os_family == "Debian"
  tags: [packages,nginx]

- name: Create the directories for site specific configurations
  file: path=/etc/nginx/{{ item }} state=directory owner=root group={{nginx_group}} mode=0755
  with_items:
    - "sites-available"
    - "sites-enabled"
    - "auth_basic"
  tags: [configuration,nginx]

- name: Ensure log directory exist
  file: path={{ nginx_log_dir }} state=directory owner={{nginx_user}} group={{nginx_group}} mode=0755
  tags: [configuration,nginx]

- name: Ensure cache directory exist
  file: path={{ nginx_cache_dir }} state=directory owner={{nginx_user}} group={{nginx_group}} mode=0755
  tags: [configuration,nginx]

- name: Copy the nginx configuration file
  template: src=nginx.conf.j2 dest=/etc/nginx/nginx.conf
  notify:
   - restart nginx
  tags: [configuration,nginx]

- name: Ensure auth_basic files created
  template: src=auth_basic.j2 dest=/etc/nginx/auth_basic/{{ item }} owner=root group={{nginx_group}} mode=0750
  with_items: '{{nginx_auth_basic_files.keys()}}'
  tags: [configuration,nginx]

- name: Create the configurations for sites
  template: src=site.conf.j2 dest=/etc/nginx/sites-available/{{ item }}.conf
  with_items: '{{nginx_sites.keys()}}'
  notify:
   - reload nginx
  tags: [configuration,nginx]

- name: Create links for sites-enabled
  file: state=link src=/etc/nginx/sites-available/{{ item }}.conf dest=/etc/nginx/sites-enabled/{{ item }}.conf
  with_items: '{{nginx_sites.keys()}}'
  notify:
   - reload nginx
  tags: [configuration,nginx]

- name: Create the configurations for independent config file
  template: src=config.conf.j2 dest=/etc/nginx/conf.d/{{ item }}.conf
  with_items: '{{nginx_configs.keys()}}'
  notify:
   - reload nginx
  tags: [configuration,nginx]

- include: remove-defaults.yml
  when: not keep_only_specified

- include: remove-extras.yml
  when: keep_only_specified

- name: Ensures nginx_pki dir exists
  file: path=/etc/nginx_pki state=directory

# see https://raymii.org/s/tutorials/Strong_SSL_Security_On_nginx.html
- name: Copy SSL Diffie Hellman Ephemeral Parameters
  # file based:
  #  copy: src=dhparam.pem
  #        dest=/etc/nginx_pki/dhparam.pem
  #        owner={{nginx_user}}
  #        group={{nginx_group}} mode=0600

  # var based:
  copy:
    content: "{{ nginx_dhparam_pem_content }}"
    dest: /etc/nginx_pki/{{nginx_dhparam}}
    owner: "{{nginx_user}}"
    group: "{{nginx_group}}"
    mode: 0600
  when: nginx_dhparam_pem_content is defined
  notify:
   - reload nginx
  tags: [configuration,nginx]

- name: Copy SSL certification
  # file based:
  # copy: src={{nginx_ssl_crt}} dest=/etc/nginx_pki/{{nginx_ssl_crt}}

  # var based:
  copy:
    content: "{{nginx_ssl_crt_content}}"
    dest: "/etc/nginx_pki/{{nginx_ssl_crt}}"
  when: nginx_ssl_crt_content is defined
  notify:
   - reload nginx
  tags: [configuration,nginx]

- name: Copy SSL private key
  # file based:
  #  copy: src={{nginx_ssl_key}} dest=/etc/nginx_pki/{{nginx_ssl_key}}
  #        owner={{nginx_user}} group={{nginx_group}} mode=0600

  # var based:
  copy:
    content: "{{ nginx_ssl_key_content }}"
    dest: "/etc/nginx_pki/{{nginx_ssl_key}}"
    owner: "{{nginx_user}}"
    group: "{{nginx_group}}"
    mode: 0600
  when: nginx_ssl_key_content is defined
  notify:
   - reload nginx
  tags: [configuration,nginx]

- name: Check nginx syntax of configuration files
  shell: nginx -t
  register: result
  changed_when: "result.rc != 0"
  always_run: yes
  tags: [configuration,nginx]

- name: Start the nginx service
  service: name=nginx state=started enabled=yes
  tags: [service,nginx]
