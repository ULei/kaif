---

- name: prepare acme directory
  file: path=/root/soft state=directory

- name: clone acme.sh
  git:
    repo: https://github.com/Neilpang/acme.sh.git
    dest: "/root/soft/acme.sh"

- name: install acme.sh
  command: ./acme.sh --log --install
  args:
    chdir: /root/soft/acme.sh/
    creates: /root/.acme.sh/acme.sh

- name: prepare certification directory
  file: path={{letsencrypt_nginx_pki_path}}/{{item.key}} state=directory
  with_dict:
    "{{letsencrypt_domains}}"

- name: install dhparam
  command: openssl dhparam -out {{letsencrypt_nginx_pki_path}}/{{item.key}}/dhparam.pem 2048
  args:
    creates: "{{letsencrypt_nginx_pki_path}}/{{item.key}}/dhparam.pem"
  with_dict:
    "{{letsencrypt_domains}}"

- name: check number of cert installed
  find:
    paths: "{{letsencrypt_nginx_pki_path}}/{{item.key}}"
    age: "-89d"
    size: "512"
    patterns: "letsencrypt\\-.+\\.pem$"
    use_regex: true
  with_dict:
    "{{letsencrypt_domains}}"
  register: cert_installed

# sample output
#
#     results: [
#       {
#          "item": {
#              "key": "foo.example.com",
#              "value": "-d localdevfoo.example.com"
#          },
#          matched: 3
#       },
#       {
#          "item": {
#              "key": "bar.example.com",
#              "value": "-d localdevbar.example.com"
#          },
#          matched: 6
#       }
#     ]
#
- name: debug
  debug: var=cert_installed

- name: collect expired cert
  set_fact:
    expired_domains: {}

##
# to verify real expiration in 1 day, use
#
#   openssl x509 -in /etc/nginx_pki/example1.com/letsencrypt-cert.pem -checkend 86400 -noout
#
# output status code = 0 is ok, 1 is expired within 1 day
#
- name: collect expired cert (cont.)
  set_fact:
    expired_domains: "{{ expired_domains | combine( {item.item.key: item.item.value} ) }}"
  when: item.matched != 3
  with_items: "{{ cert_installed.results }}"

- name: show expired domains
  debug: var=expired_domains

## cloudflare api TTL is 2 minute, so we have to extend sleep time to 240 seconds
- name: issue cert by cloudflare dns
  environment:
    CF_Key: "{{letsencrypt_cf_key}}"
    CF_Email: "{{letsencrypt_cf_email}}"
  command: /root/.acme.sh/acme.sh --issue --dns dns_cf --dnssleep 240 -d {{item.key}} {{item.value}}
           {{letsencrypt_staging | ternary( "--staging", "") }}
  with_dict:
    "{{expired_domains | default({}) }}"
  when: letsencrypt_cf_key is defined
  register: issue_cf
  failed_when: ( issue_cf.rc != 0 and issue_cf.rc != 2 )  # return code = 2 means not yet expire

- name: issue cert by aws dns
  environment:
    AWS_ACCESS_KEY_ID: "{{letsencrypt_aws_access_key_id}}"
    AWS_SECRET_ACCESS_KEY: "{{letsencrypt_aws_secret_access_key}}"
  command: /root/.acme.sh/acme.sh --issue --dns dns_aws -d {{item.key}} {{item.value}}
           {{letsencrypt_staging | ternary( "--staging", "") }}
  with_dict:
    "{{expired_domains | default({}) }}"
  when: letsencrypt_aws_access_key_id is defined
  register: issue_aws
  failed_when: ( issue_aws.rc != 0 and issue_aws.rc != 2 )  # return code = 2 means not yet expire

- name: install cert to nginx
  command: >
      /root/.acme.sh/acme.sh --installcert -d {{item.key}}
      --keypath       {{letsencrypt_nginx_pki_path}}/{{item.key}}/letsencrypt-key.pem
      --fullchainpath {{letsencrypt_nginx_pki_path}}/{{item.key}}/letsencrypt-cert.pem
      --capath        {{letsencrypt_nginx_pki_path}}/{{item.key}}/letsencrypt-chain.pem
      --reloadcmd 'service nginx reload'
  with_dict:
    "{{expired_domains | default({}) }}"
